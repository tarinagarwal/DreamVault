// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  username              String    @unique
  email                 String    @unique
  passwordHash          String
  isVerified            Boolean   @default(false)
  verificationOtp       String?
  otpExpiresAt          DateTime?
  resetPasswordToken    String?
  resetPasswordExpires  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  dreams                Dream[]

  @@map("users")
}

model Dream {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Generation preferences
  generateStory     Boolean @default(false)
  generateMusic     Boolean @default(false)
  generateComic     Boolean @default(false)
  
  // Privacy setting
  isPublic          Boolean @default(false)
  
  // Generation status
  storyStatus       GenerationStatus @default(PENDING)
  musicStatus       GenerationStatus @default(PENDING)
  comicStatus       GenerationStatus @default(PENDING)
  
  // Generated content
  story             Story?
  music             Music?
  comic             Comic?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("dreams")
}

model Story {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dreamId     String   @unique @db.ObjectId
  dream       Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  title       String
  content     String   // The generated story content
  genre       String?  // Fantasy, Adventure, etc.
  wordCount   Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("stories")
}

model Music {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  dreamId     String       @unique @db.ObjectId
  dream       Dream        @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  title       String
  description String?      // Description of the music
  genre       String?      // Electronic, Orchestral, etc.
  taskId      String?      // Suno API task ID for tracking
  
  // Multiple tracks generated by Suno
  tracks      MusicTrack[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("music")
}

model MusicTrack {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  musicId               String   @db.ObjectId
  music                 Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  
  // Suno API fields
  sunoId                String?  // Suno's unique ID for this track
  title                 String
  audioUrl              String?  // Generated audio file URL
  sourceAudioUrl        String?  // Original Suno audio URL
  streamAudioUrl        String?  // Streaming audio URL
  sourceStreamAudioUrl  String?  // Original streaming URL
  imageUrl              String?  // Cover image URL
  sourceImageUrl        String?  // Original cover image URL
  duration              Float?   // Duration in seconds
  prompt                String?  // Generation prompt/lyrics
  modelName             String?  // Model used (e.g., "chirp-v3-5")
  tags                  String?  // Music tags
  createTime            DateTime? // Suno creation time
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("music_tracks")
}

model Comic {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  dreamId     String      @unique @db.ObjectId
  dream       Dream       @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  comicUrl    String?     // URL to the complete comic strip image on imgbb
  panels      ComicPanel[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("comics")
}

model ComicPanel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  comicId     String   @db.ObjectId
  comic       Comic    @relation(fields: [comicId], references: [id], onDelete: Cascade)
  
  panelNumber Int      // Order of the panel
  imageUrl    String?  // URL to the generated image
  text        String?  // Text/dialogue for the panel
  description String   // Description used for image generation
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("comic_panels")
}

enum GenerationStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}